package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/DilemaFixer/Arni/embed"
	"github.com/DilemaFixer/Arni/recorder"
	"github.com/DilemaFixer/Arni/transcriber"
)

func main() {
	pl, err := recorder.NewVoiceRecorder()
	if err != nil {
		panic(err)
	}
	defer pl.Close()

	fmt.Println("üé§ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å...")
	pl.StartRecording()

	fmt.Println("–ì–æ–≤–æ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å... (5 —Å–µ–∫—É–Ω–¥)")
	time.Sleep(5 * time.Second)

	fmt.Println("‚èπÔ∏è  –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–ø–∏—Å—å...")
	pl.StopRecording()

	fmt.Println("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É –∑–∞–ø–∏—Å—å...")
	time.Sleep(500 * time.Millisecond)

	err = pl.PlayRecording()
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: %v\n", err)
	}

	t, t2, err := transcriber.Transcribe(pl.AudioBuffer, "/Users/illashisko/Documents/Code/whisper.cpp/models/ggml-base.bin", "ru", false)
	if err != nil {
		panic(err)
	}

	fmt.Println(t)
	fmt.Println(t2)
	fmt.Println("‚úÖ –ì–æ—Ç–æ–≤–æ!")

	ctx := context.Background()

	// —Å–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç (–ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å bge-m3)
	cli := embed.New("bge-m3") // –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏: cli.BaseURL = "http://localhost:11434"
	cli.Normalize = true       // –∫–æ—Å–∏–Ω—É—Å = dot

	// –ø–æ–ª—É—á–∞–µ–º –≤–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ª—é–±—ã—Ö —Å—Ç—Ä–æ–∫ (—Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑–∞ ‚Äî –±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã)
	vCreateRu, err := cli.Embed(ctx, "—Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")
	if err != nil {
		log.Fatal(err)
	}

	vCreateEn, err := cli.Embed(ctx, t)
	if err != nil {
		log.Fatal(err)
	}

	vDelete, err := cli.Embed(ctx, "—É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
	if err != nil {
		log.Fatal(err)
	}

	// —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (—á–µ–º –±–ª–∏–∂–µ –∫ 1 ‚Äî —Ç–µ–º –ø–æ—Ö–æ–∂–µ–µ)
	same := embed.Cosine(vCreateRu, vCreateEn)
	diff := embed.Cosine(vCreateRu, vDelete)

	fmt.Printf("create RU vs EN: %.3f\n", same)
	fmt.Printf("create vs delete: %.3f\n", diff)

	// –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–º
	const threshold = 0.75
	if same >= threshold {
		fmt.Println("‚Üí —ç—Ç–æ –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –∫–æ–º–∞–Ω–¥–∞ (–º–∞—Ç—á)")
	} else {
		fmt.Println("‚Üí –Ω–µ –ø–æ—Ö–æ–∂–µ (–Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞)")
	}
}
